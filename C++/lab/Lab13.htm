<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./Lab9_files/filelist.xml">
<title>Lab worksheet</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Jen Pedler</o:Author>
  <o:Template>Lab.dot</o:Template>
  <o:LastAuthor>rajesh pampapathi</o:LastAuthor>
  <o:Revision>4</o:Revision>
  <o:TotalTime>32</o:TotalTime>
  <o:LastPrinted>2002-10-28T14:29:00Z</o:LastPrinted>
  <o:Created>2002-10-28T14:51:00Z</o:Created>
  <o:LastSaved>2004-01-19T15:12:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>555</o:Words>
  <o:Characters>3166</o:Characters>
  <o:Company>Birkbeck College</o:Company>
  <o:Lines>26</o:Lines>
  <o:Paragraphs>6</o:Paragraphs>
  <o:CharactersWithSpaces>3888</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	tab-stops:center 216.0pt right 432.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	tab-stops:center 216.0pt right 432.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
span.code
	{mso-style-name:code;
	mso-ansi-font-size:10.0pt;
	mso-ascii-font-family:"Courier New";
	mso-hansi-font-family:"Courier New";
	mso-ansi-language:EN-GB;}
@page Section1
	{size:612.0pt 792.0pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:36.0pt;
	mso-footer-margin:36.0pt;
	mso-header:url("./Lab9_files/header.htm") h1;
	mso-footer:url("./Lab9_files/header.htm") f1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:548540204;
	mso-list-type:simple;
	mso-list-template-ids:247480284;}
@list l0:level1
	{mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;
	mso-ansi-font-size:11.0pt;
	font-family:"Times New Roman";
	mso-ansi-font-weight:normal;
	mso-ansi-font-style:normal;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
</head>

<body lang=EN-GB style='tab-interval:36.0pt'>

<div class=Section1>

<p class=MsoTitle><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt'>Lab
worksheet 13<o:p></o:p></span></p>


<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 18.0pt'><![if !supportLists]><span lang=EN-US style='font-size:
11.0pt;mso-bidi-font-size:10.0pt'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US style='font-size:11.0pt;mso-bidi-font-size:
10.0pt'>
Using our usual definition of the <code>Binode</code> class:
<pre>
	class Binode
{ public:
	int	n;
	Binode* l, *r;
	Binode(int x) { n = x; l = r = NULL; }
};
</pre>
write a program that, initially, uses only
the right pointers to create a <em>singly-linked</em> list. Write a <code>display</code> procedure
so that you can check that the list has been created correctly.
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Now write a function that takes a pointer to the left node (currently the head node) of the list
and inserts the left pointers so as to make it a doubly-linked list, and returns a pointer
to the right node (i.e. what used to be the tail node). Modify your <code>display</code>
procedure so that it displays the list left to right or right to left, depending on whether it
is given the left or the right pointer.
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Now write a procedure that takes the left pointer of a doubly-linked list and a single integer,
and removes the node containing that integer from the list. Use your <code>display</code>
procedure to check that it works.
<o:p></o:p></i></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 18.0pt'><![if !supportLists]><span lang=EN-US style='font-size:
11.0pt;mso-bidi-font-size:10.0pt'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US style='font-size:11.0pt;mso-bidi-font-size:
10.0pt'>Write a program that creates a two-dimensional vector of integers with four rows and five
columns. Fill the vector with values so that, when you print it out row by row, you get:
<pre>

 0   1   2   3   4
10  11  12  13  14
20  21  22  23  24
30  31  32  33  34
</pre>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Now print out the vector so that each <em>column</em> of the vector produces one line of output:
<pre>

 0  10  20  30
 1  11  21  31
 2  12  22  32
 3  13  23  33
 4  14  24  34
</pre>
<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 18.0pt'><![if !supportLists]><span lang=EN-US style='font-size:
11.0pt;mso-bidi-font-size:10.0pt'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US style='font-size:11.0pt;mso-bidi-font-size:
10.0pt'>Using a version of <code>Binode</code> that stores a string rather than an integer,
write a procedure <code>addnode(Binode*&, string)</code>
that adds a string to a binary search tree. Use this in a program to build a binary search tree
out of the names in <code>n:\C++\queries.txt</code>.
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Now write a function <code>there(Binode*, string)</code> that returns true if the string is
in the tree, false otherwise. Test it with a few of the names from <code>n:\C++\queries.txt</code>
and a few names of your own invention that are not in the tree.
<o:p></o:p></span></p>



<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 18.0pt'><![if !supportLists]><span lang=EN-US style='font-size:
11.0pt;mso-bidi-font-size:10.0pt'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US style='font-size:11.0pt;mso-bidi-font-size:
10.0pt'>Download the file <code>n:\C++\precision.cpp</code>. Have a look at it and guess
what you think the output will be. Then compile and run it.
<o:p></o:p></i></span></p>


<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo2;
tab-stops:list 18.0pt'><![if !supportLists]><span lang=EN-US style='font-size:
11.0pt;mso-bidi-font-size:10.0pt'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US style='font-size:11.0pt;mso-bidi-font-size:
10.0pt'>Write a program that creates an array (not a vector) of twelve integers and initializes
the first six. Output the value of <code>sizeof</code> the array. Now write a procedure
that displays the contents of an array of integers and test it with your array. For interest,
output the value of <code>sizeof</code> the array from within the procedure. Use the array to
initialize (in main) a vector of twelve integers. Write a procedure that takes an array and
a vector and adds the vector, element by element, to the array, and test it using your array and
your vector. Use your display procedure to display the final contents of the array.
<o:p></o:p></i></span></p>

</div>

</body>

</html>
