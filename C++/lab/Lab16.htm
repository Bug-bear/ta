<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./Lab16_files/filelist.xml">
<link rel=Edit-Time-Data href="./Lab16_files/editdata.mso">
<title>Lab worksheet</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Jennifer Pedler</o:Author>
  <o:Template>Lab.dot</o:Template>
  <o:LastAuthor>rajesh pampapathi</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:LastPrinted>2002-11-20T14:13:00Z</o:LastPrinted>
  <o:Created>2002-11-20T20:21:00Z</o:Created>
  <o:LastSaved>2002-11-20T20:21:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>184</o:Words>
  <o:Characters>1050</o:Characters>
  <o:Company>Birkbeck College</o:Company>
  <o:Lines>8</o:Lines>
  <o:Paragraphs>2</o:Paragraphs>
  <o:CharactersWithSpaces>1289</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	tab-stops:center 216.0pt right 432.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	tab-stops:center 216.0pt right 432.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:22.5pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
span.code
	{mso-style-name:code;
	mso-ansi-font-size:10.0pt;
	mso-ascii-font-family:"Courier New";
	mso-hansi-font-family:"Courier New";
	mso-ansi-language:EN-GB;}
@page Section1
	{size:612.0pt 792.0pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:36.0pt;
	mso-footer-margin:36.0pt;
	mso-header:url("./Lab16_files/header.htm") h1;
	mso-footer:url("./Lab16_files/header.htm") f1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:1776485272;
	mso-list-type:simple;
	mso-list-template-ids:134807567;}
@list l0:level1
	{mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
</head>

<body lang=EN-GB style='tab-interval:36.0pt'>

<div class=Section1>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span style='font-family:Arial;mso-bidi-font-family:"Times New Roman";
mso-ansi-language:EN-GB'>Lab worksheet 16<o:p></o:p></span></b></p>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt;font-family:
Arial;mso-bidi-font-family:"Times New Roman";mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt;font-family:
Arial;mso-bidi-font-family:"Times New Roman";mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>
<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'>Write and test a recursive procedure that takes a string as its
argument and outputs a triangular pattern. For example, if the string was "Birkbeck",
it would output the following:
<pre>

Birkbeck
Birkbec
Birkbe
Birkb
Birk
Bir
Bi
B
</pre>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'>Decide what will be the output of the following program
(assuming #include etc):
<pre>

void out(int n)
{	if (n > 0)
	{	out(n - 1);
		cout &lt;&lt; n;
		out(n - 1);
	}
}

int main()
{	for (int i = 1; i <= 5; i++)
	{	out(i);
		cout &lt;&lt; endl;
	}
}
</pre>
Then run it to see if you were right.
<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'>Write and test a recursive procedure that takes an int as its
argument and outputs the digits in reverse,
e.g. if the argument passed to the procedure was 123 the procedure should print
321.
<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'>Write a function that uses recursion to calculate the
product of a vector (i.e. the result of multiplying all the elements together.)
The parameters passed to this function should be the vector and the subscript
of its last element. <br>
Write a main function that stores ints in a vector and then calls your function
to calculate the product of the vector. Output the result in main.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'>Use the Node class for this exercise:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;
margin-left:22.5pt;margin-bottom:.0001pt'><span class=code><span
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>class
Node<o:p></o:p></span></span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;
margin-left:22.5pt;margin-bottom:.0001pt'><span class=code><span
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>{<o:p></o:p></span></span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;
margin-left:22.5pt;margin-bottom:.0001pt'><span class=code><span
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>public:<o:p></o:p></span></span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;
margin-left:22.5pt;margin-bottom:.0001pt'><span class=code><span
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>  </span>int n;<o:p></o:p></span></span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;
margin-left:22.5pt;margin-bottom:.0001pt'><span class=code><span
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>  </span>Node* link;<o:p></o:p></span></span></p>

<p class=MsoNormal style='margin-left:27.0pt'><span class=code><span
style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>};</span></span><span
style='mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoBodyTextIndent><span style='font-size:11.0pt;mso-bidi-font-size:
10.0pt'>Write a boolean function that takes a pointer to a linked list of Nodes
as its argument and recursively checks whether the ints are sorted in ascending
order. It should return TRUE if the list is sorted, otherwise it should return
FALSE. If the list is empty or if there is only one node in the list,
it should return TRUE.<br>
Write a main program that creates a linked list of ints and then calls your
function to test whether it is sorted. If the function returns TRUE output
&quot;List sorted&quot;, otherwise output &quot;List not sorted.&quot;<br>
Test your function with a sorted list, an unsorted list and an empty list.<br
style='mso-special-character:line-break'>
<![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'>
<![endif]></span><span class=code><span style='font-size:11.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><o:p></o:p></span></span></p>

<p class=MsoHeader style='tab-stops:36.0pt'><span style='mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>
<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>6.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'>
A ValEx (short for "Valid Expression") is defined as either a digit (i.e. a single digit is a ValEx)
or as (ValEx+Valex) (i.e. open parenthesis followed by a ValEx followed by a plus sign followed by a ValEx
followed by a close parenthesis). Here are some examples of Valid Expressions:
<pre>

6
(4+7)
((3+9)+(8+4))
(4+(9+8))
(5+(4+(6+7)))
(((4+3)+5)+6)
</pre>
and here are some invalid ones:
<pre>

49
6+
X
(
4*3
(4+5
3+4)
((3+4)+(7))
</pre>
The following program takes lines of characters and decides, for each one, whether or not it is a ValEx:
<pre>

#include &lt;iostream>
#include &lt;string>
#include &lt;sstream>
#include &lt;cctype>
using namespace std;

bool isvalid(istringstream& is)
{	<em>Function body omitted</em>
}

bool empty(istringstream& is)
{	char	ch;
	is.get(ch);
	return is.fail();
}

int main()
{	string s;
	while(getline(cin, s))
	{	istringstream	is(s);
		cout &lt;&lt; (isvalid(is) && empty(is) ?
			"Expression OK" : "Not OK") &lt;&lt; endl;
	}
}
</pre>

Write the body of the <code>isvalid</code> function (use recursion).
<o:p></o:p></span></p>
</div>

</body>

</html>
