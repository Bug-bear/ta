<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./Lab5_files/filelist.xml">
<title>Lab worksheet</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Jen Pedler</o:Author>
  <o:Template>Lab.dot</o:Template>
  <o:LastAuthor>rajesh pampapathi</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:LastPrinted>2002-10-14T14:03:00Z</o:LastPrinted>
  <o:Created>2002-10-15T16:54:00Z</o:Created>
  <o:LastSaved>2002-10-15T16:54:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>504</o:Words>
  <o:Characters>2873</o:Characters>
  <o:Company>Birkbeck College</o:Company>
  <o:Lines>23</o:Lines>
  <o:Paragraphs>5</o:Paragraphs>
  <o:CharactersWithSpaces>3528</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	tab-stops:center 216.0pt right 432.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	tab-stops:center 216.0pt right 432.0pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
span.code
	{mso-style-name:code;
	mso-ansi-font-size:10.0pt;
	mso-ascii-font-family:"Courier New";
	mso-hansi-font-family:"Courier New";
	mso-ansi-language:EN-GB;}
@page Section1
	{size:612.0pt 792.0pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:36.0pt;
	mso-footer-margin:36.0pt;
	mso-header:url("./Lab5_files/header.htm") h1;
	mso-footer:url("./Lab5_files/header.htm") f1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:952713168;
	mso-list-type:simple;
	mso-list-template-ids:134807567;}
@list l0:level1
	{mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;}
@list l1
	{mso-list-id:1042709340;
	mso-list-type:simple;
	mso-list-template-ids:134807567;}
@list l1:level1
	{mso-level-tab-stop:18.0pt;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
</head>

<body lang=EN-GB style='tab-interval:36.0pt'>

<div class=Section1>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span style='font-family:Arial;mso-bidi-font-family:"Times New Roman";
mso-ansi-language:EN-GB'>Lab worksheet 4<o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>1A.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'>A leap year occurs when the year is divisible by 4,
except when it is also divisible by 100 (1900 was not a leap year), though, if the
year is divisible by 400, it is (so 2000 was a leap year).Write a procedure that takes
a year (an int) and outputs a line saying whether that year was or was not a leap year.
Put your procedure in a program that asks the user to key in a number and calls the
procedure to output its line, and carries on doing this until the user keys in a
CTRL-Z.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>1B.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'>If we have not covered functions in class but you have read about them
(for example in <a href="http://www.dcs.bbk.ac.uk/~roger/cpp/intro4.htm"><code>~roger/cpp/intro4.htm</code></a>),
modify your program by replacing the procedure by a boolean function that takes a year and returns true if
it is a leap year, false otherwise, and altering the main program to call this function.
<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>2A.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'>Write a procedure that takes a double, <i
style='mso-bidi-font-style:normal'>item_price</i>, as its parameter and outputs
the amount of VAT payable on that item (a double), using a VAT rate of 17.5%. <br>
Write a main program to test your procedure. It should prompt the user for a
price and then call the procedure to display the amount of VAT payable (formatted to 2 decimal
places).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>2B.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'>Write a version of the same program that has a function
instead of a procedure. The function takes a double, <i
style='mso-bidi-font-style:normal'>item_price</i>, as its parameter and returns
the amount of VAT payable.
Modify your main program so that it prompts the user for a
price and calls the function to return the amount of VAT payable, which it then
displays (formatted to 2 decimal places).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'>A problem with the procedure (2A) or function (2B) above is that the VAT
rate is hard-wired into the code. Overcome this by modifying the procedure/function
to take an additional double argument, <i style='mso-bidi-font-style:normal'>rate</i>.<br>
Now modify your main program to take both the price and the VAT rate from the user
and to output the amount of VAT payable.<br>
<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt left 92.15pt'><![if !supportLists]><span
style='font-size:11.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
style='font-size:11.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>Write
a procedure that takes a number up to 4 digits long as its
parameter and outputs the number with the leading spaces filled with zeros.
Test your procedure in a program. For example:
<pre>
   input             output
2                  0002
34                 0034
740                0740
9999               9999
</pre> <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt left 92.15pt'><![if !supportLists]><span
style='font-size:11.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]><span
style='font-size:11.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>Write
a procedure that takes two Employee objects as its parameters and tests
whether their names are the same. The procedure should output “Same name” if the names
are the same, otherwise it should output “Different names”. (If you prefer, you can
write a boolean function rather than a procedure.)
Write a main program to test your procedure or function.
(Just initialise the objects in the program, don’t prompt for input.)
<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:EN-GB'>6.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'>Write a function that takes two Employee objects as
its parameters and returns a negative value if the first Employee’s salary is
less than the second Employee’s salary, a positive value if the first
Employee’s salary is greater than the second Employee’s salary or zero if the
two salaries are the same.<br>
Extend the main program you wrote for question 4 so that it displays the
following messages:<br>
<span style="mso-spacerun: yes"> </span>“<i style='mso-bidi-font-style:normal'>name
</i>earns more than <i style='mso-bidi-font-style:normal'>name”</i> if the
salaries are different (with the name of the Employee with the largest salary
first) or “<i style='mso-bidi-font-style:normal'>name </i>earns the same as <i
style='mso-bidi-font-style:normal'>name”</i> if the salaries are the same. <br>
Run the program with various initial values to cover all possible cases.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span lang=EN-US style='font-size:
11.0pt;mso-bidi-font-size:10.0pt'>7.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US style='font-size:11.0pt;mso-bidi-font-size:
10.0pt'>In the last worksheet, you wrote a program to look for the dot in strings
such as "hello.cpp". Modify that program so that it uses a
function to search the string for a specified character. The function should
take a string and a single character (as a string) as its arguments. It then searches the
string until it finds the character and returns a substring consisting of all
the characters up to that point. If it doesn't find the character it should
return the string unchanged. <br>
Your main() function should allow the user to repeatedly enter strings and a
character to be searched for until they hit CTRL+Z to signal the end of input.
For each string it should call the function, check the string for the requested
character and then output the returned substring. (If you prefer, you can write a
procedure rather than a function. The procedure will take the string and the character
as its parameters and output the required substring.)<o:p></o:p></span></p>

<span lang=EN-US style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'>
</span>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt'><![if !supportLists]><span lang=EN-US style='font-size:
11.0pt;mso-bidi-font-size:10.0pt'>8.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span lang=EN-US style='font-size:11.0pt;mso-bidi-font-size:
10.0pt'>The following program compiles and runs, but is in need of some
improvement. Rewrite it, making any changes you think appropriate. Compile and
run your new program.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:11.0pt;mso-bidi-font-size:
10.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";color:blue'>#include</span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New"'> &lt;iostream&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";color:blue'>using</span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New"'> <span style='color:blue'>namespace</span> std;<o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";color:blue'>int</span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New"'> main()<o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'>{<span style='mso-tab-count:1'>     </span><span
style='color:blue'>int</span> x, y;<o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'><span style='mso-tab-count:1'>      </span>cin &gt;&gt; x
&gt;&gt; y;<o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'><span style='mso-tab-count:1'>      </span><span
style='color:blue'>if</span> (!cin.fail())<o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'><span style='mso-tab-count:1'>      </span><span
style='mso-tab-count:1'>      </span><span style='color:blue'>if</span> (x ==
10 &amp;&amp; y == 10)<o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'><span style='mso-tab-count:2'>            </span><span
style='mso-tab-count:1'>      </span>cout &lt;&lt; &quot;Both are equal to
10&quot; &lt;&lt; endl;<o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'><span style='mso-tab-count:1'>      </span><span
style='mso-tab-count:1'>      </span><span style='color:blue'>else</span> <span
style='color:blue'>if</span> (x &gt; 10 &amp;&amp; y &gt; 10)<o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'><span style='mso-tab-count:2'>            </span><span
style='mso-tab-count:1'>      </span>cout &lt;&lt; &quot;Both are greater than
10&quot; &lt;&lt; endl;<o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'><span style='mso-tab-count:1'>      </span><span
style='mso-tab-count:1'>      </span><span style='color:blue'>else</span> <span
style='color:blue'>if</span> (x &lt; 10 &amp;&amp; y &lt; 10)<o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'><span style='mso-tab-count:2'>            </span><span
style='mso-tab-count:1'>      </span>cout &lt;&lt; &quot;Both are less than
10&quot; &lt;&lt; endl;<o:p></o:p></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;mso-layout-grid-align:
none;text-autospace:none'><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'>}<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:11.0pt;mso-bidi-font-size:
10.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:11.0pt;mso-bidi-font-size:
10.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>





<p><i><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt'>These are
supplementary exercises to the problems on Worksheet 4. Only do them if you
have completed the rest of the worksheet and have time over. It is not necessary to do them
before Worksheet 5.<o:p></o:p></span></i></p>

<p><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt'>First compile and
run the intname program from Chapter 5 of the textbook (p.183). You can
download the source code for this program from the C++ resources web page (link
from Module Outlines and Learning Resources on MSc Computer Science Home page).
Click Horstmann examples, then Ch 5.
Right click on intname.cpp to get a shortcut menu to allow you to save this
file to your home directory. <o:p></o:p></span></p>

<p><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt'>Run the program
with various values and think about how it works. Once you are happy with this,
make the following modifications:<o:p></o:p></span></p>

<ol start=1 type=1>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:11.0pt;mso-bidi-font-size:10.0pt'>Add a new line
     character to the output so that the prompt appears on a new line.<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:11.0pt;mso-bidi-font-size:10.0pt'>For input such as 174
     the program outputs &quot;one hundred seventy four&quot;. This is an
     Americanism. In English we would write it as &quot;one hundred <i>and</i>
     seventy four&quot;. Modify the int_name function to include
     &quot;and&quot; as appropriate. Test it with input such as 101 (one
     hundred and one), 1023 (one thousand and twenty three), 1150 (one thousand
     one hundred and fifty).<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:11.0pt;mso-bidi-font-size:10.0pt'>As it is currently
     implemented the int_name function inserts a leading space at the beginning
     of the output string in most cases. Modify the function to fix this
     problem. (See Ex. P5.6 p.200 but the problem is more widespread than this
     suggests.)<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:11.0pt;mso-bidi-font-size:10.0pt'>Modify the int_name
     function so that it will deal with negative values (<i>hint: include the
     header file &lt;cstdlib&gt; and use abs()</i>) and zero. (See Ex. P5.5
     p.200.)<o:p></o:p></span></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><span lang=EN-US
     style='font-size:11.0pt;mso-bidi-font-size:10.0pt'>Modify the int_name
     function so that it will deal with millions. (See Ex. P5.4 p.200). The
     compiler on our machines uses 32-bit ints so there is no need to change the variables
     to long. In fact, once you have got the program to deal with millions you
     can deal with numbers far larger than 2,000,000 as suggested in the
     exercise. What is the largest number the program can deal with?<o:p></o:p></span></li>
</ol>

<p><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt'>Reference: </span></b><span
style='font-size:11.0pt;mso-bidi-font-size:12.0pt'>Horstmann pp.179-192.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>


</div>

</body>

</html>
